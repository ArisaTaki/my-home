# Dev 分支推送部署预览
## 仅部署 Win 端
name: Build Dev

on:
  push:
    branches:
      - dev
      - master

jobs:
  build:
    name: Build Website
    runs-on: windows-latest

    steps:
      # 检出 Git 仓库
      - name: Check out git repository
        uses: actions/checkout@v4.1.1
      # 安装 Node.js
      - name: Install Node.js
        uses: actions/setup-node@v4.0.0
        with:
          node-version: "18.x"
      # 复制环境变量文件
      - name: Setup env file
        run: |
          # 创建基本的.env文件
          "# 站点信息" | Out-File -FilePath .env -Encoding utf8
          "VITE_SITE_NAME = `"八六的站点`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_AUTHOR = `"八六`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_KEYWORDS = `"八六,个人主页`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_DES = `"前端工程师的个人小窝`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_URL = `"HaR`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_LOGO = `"/images/icon/favicon.ico`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_MAIN_LOGO = `"/images/icon/logo.png`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_APPLE_LOGO = `"/images/logo/apple-touch-icon.png`"" | Out-File -FilePath .env -Append -Encoding utf8

          "# 简介文本" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_DESC_HELLO = `"Here is HacchiRoku~`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_DESC_TEXT = `"你好，我是八六，是前后端工程师，同时也是个WebGL特效开发工程师以及服务器运维。详情请使用电脑浏览此网页并且点击该区域亦或是欢迎与我取得联系~`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_DESC_HELLO_OTHER = `"よこそ〜`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_DESC_TEXT_OTHER = `"再点一次就什么都不会再有了哇`"" | Out-File -FilePath .env -Append -Encoding utf8

          "# 社交链接" | Out-File -FilePath .env -Append -Encoding utf8
          "## 请在 src/assets/socialLinks.json 文件中配置" | Out-File -FilePath .env -Append -Encoding utf8

          "# 网站链接" | Out-File -FilePath .env -Append -Encoding utf8
          "## 请在 src/assets/siteLinks.json 文件中配置" | Out-File -FilePath .env -Append -Encoding utf8

          "# 天气 Key" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_QWEATHER_KEY = `"${{ secrets.ENV_QWEATHER_KEY }}`"" | Out-File -FilePath .env -Append -Encoding utf8

          "# 建站日期" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_START = `"2022-01-01`"" | Out-File -FilePath .env -Append -Encoding utf8

          "# ICP 备案号" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_ICP = `"`"" | Out-File -FilePath .env -Append -Encoding utf8

          "# 歌曲 API 地址" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SONG_API = `"${{ secrets.ENV_SONG_API }}`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SONG_SERVER = `"netease`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SONG_TYPE = `"playlist`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SONG_ID = `"${{ secrets.ENV_SONG_ID }}`"" | Out-File -FilePath .env -Append -Encoding utf8

          Write-Host "Created .env file with values from GitHub Secrets"
      # 安装项目依赖
      - name: Install Dependencies
        run: npm install
      # 构建程序
      - name: Build Website
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      # 上传构建产物
      - name: Upload artifacts for GitHub
        uses: actions/upload-artifact@v4
        with:
          name: Home
          path: dist
          retention-days: 1

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build # 确保在构建完成后才运行部署

    steps:
      # 下载构建产物
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Home
          path: dist

      # 部署到远程服务器
      - name: Deploy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          port: ${{ secrets.SERVER_PORT }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "dist/*"
          target: ${{ secrets.SERVER_PATH }}
          rm: true
          strip_components: 1

      # 设置Nginx并重启服务
      - name: Setup Nginx and restart
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          port: ${{ secrets.SERVER_PORT }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # 确保目标目录存在
            mkdir -p ${{ secrets.SERVER_PATH }}

            # 设置正确的权限
            sudo chown -R ${{ secrets.SERVER_USERNAME }}:www-data ${{ secrets.SERVER_PATH }}
            sudo chmod -R 755 ${{ secrets.SERVER_PATH }}

            # 尝试识别服务器环境并重载Nginx
            echo "正在识别服务器环境..."

            # 检查常见的Web面板
            if [ -f "/etc/init.d/bt" ] || [ -d "/www/server/panel" ]; then
              echo "检测到宝塔面板环境，尝试使用宝塔命令重载Nginx..."
              if [ -f "/www/server/nginx/sbin/nginx" ]; then
                sudo /www/server/nginx/sbin/nginx -s reload
              else
                sudo bt nginx reload 2>/dev/null || echo "宝塔Nginx重载命令失败"
              fi
            # 检查LNMP架构
            elif [ -f /usr/local/lnmp/lnmp ]; then
              echo "检测到LNMP架构，使用LNMP命令重载Nginx..."
              sudo /usr/local/lnmp/lnmp nginx reload
            elif [ -f /root/lnmp/lnmp ]; then
              echo "检测到LNMP架构（在/root目录），使用LNMP命令重载Nginx..."
              sudo /root/lnmp/lnmp nginx reload
            else
              # 尝试多种方式找到并重载现有的Nginx
              echo "尝试找到并重载现有的Nginx..."
              
              # 找到正在运行的nginx进程
              NGINX_PROG=$(ps aux | grep nginx | grep -v grep | head -n 1 | awk '{print $11}')
              if [ ! -z "$NGINX_PROG" ] && [ -x "$NGINX_PROG" ]; then
                echo "找到运行中的Nginx程序: $NGINX_PROG"
                NGINX_ROOT=$(dirname $(dirname $NGINX_PROG))
                echo "Nginx根目录: $NGINX_ROOT"
                
                # 尝试重载
                sudo $NGINX_PROG -s reload 2>/dev/null || echo "直接重载失败"
                
                # 尝试找到配置文件
                for CONF_PATH in "$NGINX_ROOT/conf/nginx.conf" "/etc/nginx/nginx.conf" "/usr/local/nginx/conf/nginx.conf" "/www/server/nginx/conf/nginx.conf"
                do
                  if [ -f "$CONF_PATH" ]; then
                    echo "找到配置文件: $CONF_PATH"
                    sudo $NGINX_PROG -s reload -c $CONF_PATH 2>/dev/null && echo "使用配置文件重载成功" && break
                  fi
                done
              else
                # 如果找不到进程，尝试常见位置
                for NGINX_PATH in "/usr/local/nginx/sbin/nginx" "/usr/sbin/nginx" "/www/server/nginx/sbin/nginx" "/opt/nginx/sbin/nginx"
                do
                  if [ -x "$NGINX_PATH" ]; then
                    echo "找到Nginx可执行文件: $NGINX_PATH"
                    sudo $NGINX_PATH -s reload 2>/dev/null && echo "重载成功" && break
                  fi
                done
              fi
              
              # 最后尝试使用系统服务命令
              if command -v systemctl >/dev/null 2>&1; then
                echo "尝试使用systemctl重载Nginx..."
                sudo systemctl reload nginx 2>/dev/null || echo "systemctl重载失败"
              elif command -v service >/dev/null 2>&1; then
                echo "尝试使用service重载Nginx..."
                sudo service nginx reload 2>/dev/null || echo "service重载失败"
              fi
            fi

            echo "网站文件部署完成！如果Nginx配置未能自动重载，请手动执行重载操作。"
