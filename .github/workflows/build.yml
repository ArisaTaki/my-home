# Dev 分支推送部署预览
## 仅部署 Win 端
name: Build Dev

on:
  push:
    branches:
      - dev
      - master

jobs:
  build:
    name: Build Website
    runs-on: windows-latest

    steps:
      # 检出 Git 仓库
      - name: Check out git repository
        uses: actions/checkout@v4.1.1
      # 安装 Node.js
      - name: Install Node.js
        uses: actions/setup-node@v4.0.0
        with:
          node-version: "18.x"
      # 复制环境变量文件
      - name: Setup env file
        run: |
          # 创建基本的.env文件
          "# 站点信息" | Out-File -FilePath .env -Encoding utf8
          "VITE_SITE_NAME = `"八六的站点`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_AUTHOR = `"八六`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_KEYWORDS = `"八六,个人主页`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_DES = `"前端工程师的个人小窝`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_URL = `"HaR`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_LOGO = `"/images/icon/favicon.ico`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_MAIN_LOGO = `"/images/icon/logo.png`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_APPLE_LOGO = `"/images/logo/apple-touch-icon.png`"" | Out-File -FilePath .env -Append -Encoding utf8

          "# 简介文本" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_DESC_HELLO = `"Here is HacchiRoku~`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_DESC_TEXT = `"你好，我是八六，是前后端工程师，同时也是个WebGL特效开发工程师以及服务器运维。详情请使用电脑浏览此网页并且点击该区域亦或是欢迎与我取得联系~`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_DESC_HELLO_OTHER = `"よこそ〜`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_DESC_TEXT_OTHER = `"再点一次就什么都不会再有了哇`"" | Out-File -FilePath .env -Append -Encoding utf8

          "# 社交链接" | Out-File -FilePath .env -Append -Encoding utf8
          "## 请在 src/assets/socialLinks.json 文件中配置" | Out-File -FilePath .env -Append -Encoding utf8

          "# 网站链接" | Out-File -FilePath .env -Append -Encoding utf8
          "## 请在 src/assets/siteLinks.json 文件中配置" | Out-File -FilePath .env -Append -Encoding utf8

          "# 天气 Key" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_QWEATHER_KEY = `"${{ secrets.ENV_QWEATHER_KEY }}`"" | Out-File -FilePath .env -Append -Encoding utf8

          "# 建站日期" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_START = `"2022-01-01`"" | Out-File -FilePath .env -Append -Encoding utf8

          "# ICP 备案号" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SITE_ICP = `"`"" | Out-File -FilePath .env -Append -Encoding utf8

          "# 歌曲 API 地址" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SONG_API = `"${{ secrets.ENV_SONG_API }}`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SONG_SERVER = `"netease`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SONG_TYPE = `"playlist`"" | Out-File -FilePath .env -Append -Encoding utf8
          "VITE_SONG_ID = `"${{ secrets.ENV_SONG_ID }}`"" | Out-File -FilePath .env -Append -Encoding utf8

          Write-Host "Created .env file with values from GitHub Secrets"
      # 安装项目依赖
      - name: Install Dependencies
        run: npm install
      # 构建程序
      - name: Build Website
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      # 上传构建产物
      - name: Upload artifacts for GitHub
        uses: actions/upload-artifact@v4
        with:
          name: Home
          path: dist
          retention-days: 1

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build # 确保在构建完成后才运行部署

    steps:
      # 下载构建产物
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Home
          path: dist

      # 部署到远程服务器
      - name: Deploy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          port: ${{ secrets.SERVER_PORT }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "dist/*"
          target: ${{ secrets.SERVER_PATH }}
          rm: true
          strip_components: 1

      # 设置Nginx并重启服务
      - name: Setup Nginx and restart
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          port: ${{ secrets.SERVER_PORT }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # 确保目标目录存在
            mkdir -p ${{ secrets.SERVER_PATH }}

            # 设置正确的权限
            sudo chown -R ${{ secrets.SERVER_USERNAME }}:www-data ${{ secrets.SERVER_PATH }}
            sudo chmod -R 755 ${{ secrets.SERVER_PATH }}

            # 检查是否是LNMP架构
            echo "检查LNMP架构..."
            if [ -f /usr/local/lnmp/lnmp ]; then
              echo "检测到LNMP架构，使用LNMP命令重启Nginx..."
              sudo /usr/local/lnmp/lnmp nginx reload
              exit_code=$?
              if [ $exit_code -ne 0 ]; then
                echo "LNMP Nginx重启失败，尝试使用restart命令..."
                sudo /usr/local/lnmp/lnmp nginx restart
              fi
            elif [ -f /root/lnmp/lnmp ]; then
              echo "检测到LNMP架构（在/root目录），使用LNMP命令重启Nginx..."
              sudo /root/lnmp/lnmp nginx reload
              exit_code=$?
              if [ $exit_code -ne 0 ]; then
                echo "LNMP Nginx重启失败，尝试使用restart命令..."
                sudo /root/lnmp/lnmp nginx restart
              fi
            else
              # 尝试使用标准Nginx方式
              echo "尝试使用标准方式重新加载Nginx配置..."
              if [ -f /usr/local/nginx/sbin/nginx ]; then
                # 如果PID文件不存在，可能需要先启动Nginx
                if [ ! -f /usr/local/nginx/logs/nginx.pid ]; then
                  echo "Nginx可能未运行，尝试启动..."
                  sudo /usr/local/nginx/sbin/nginx
                  sleep 2
                fi
                
                sudo /usr/local/nginx/sbin/nginx -s reload
                if [ $? -ne 0 ]; then
                  echo "Nginx重载失败，尝试使用-c参数指定配置文件..."
                  sudo /usr/local/nginx/sbin/nginx -s reload -c /usr/local/nginx/conf/nginx.conf
                fi
              elif [ -f /usr/sbin/nginx ]; then
                echo "使用系统Nginx..."
                sudo /usr/sbin/nginx -s reload
                if [ $? -ne 0 ]; then
                  echo "系统Nginx重载失败，尝试重启服务..."
                  sudo service nginx restart || sudo systemctl restart nginx
                fi
              else
                echo "无法找到Nginx可执行文件，尝试查找..."
                NGINX_PATH=$(sudo find / -name nginx -type f -executable 2>/dev/null | grep -v "\.git" | head -n 1)
                if [ ! -z "$NGINX_PATH" ]; then
                  echo "找到Nginx路径: $NGINX_PATH，尝试重新加载..."
                  sudo $NGINX_PATH -s reload
                  if [ $? -ne 0 ]; then
                    echo "重载失败，尝试使用-c参数..."
                    NGINX_CONF=$(sudo find / -name nginx.conf 2>/dev/null | grep -v "\.git" | head -n 1)
                    if [ ! -z "$NGINX_CONF" ]; then
                      echo "找到配置文件: $NGINX_CONF"
                      sudo $NGINX_PATH -s reload -c $NGINX_CONF
                    fi
                  fi
                else
                  echo "无法找到Nginx，网站文件已部署但Nginx未重新加载。请手动重新加载配置。"
                fi
              fi
            fi

            echo "网站部署完成！"
